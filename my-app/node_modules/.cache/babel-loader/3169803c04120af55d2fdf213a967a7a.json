{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prite\\\\WebstormProjects\\\\lab4\\\\my-app\\\\src\\\\StartPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst data = ['Берик Дондаррион', 'Леди Мелиссандра', 'Полливер', 'Уолдер Фрей', 'Тайвин Ланнистер', 'Сир Мерин Трэнт', 'Король Джоффри', 'Сир Илин Пейн', 'Гора', 'Пес', 'Серсея Ланнистер'];\nfunction StartPage() {\n  _s();\n  // В функциональных компонентах для работы с состоянием можно использовать хук useState()\n  // Он возвращает кортеж из двух элементов:\n  // 1 элемент - объект состояния\n  // 2 элемент - метод который позволит нам обновить состояние\n  const [randomName, setRandomName] = useState();\n\n  // Кстати, это хороший пример деструктуризации массива в JavaScript\n  const [names, setNames] = useState(data);\n  const [showNames, setShowNames] = useState(false);\n\n  // В данном хендлере мы изменяем состояние на какое-то конкретное\n  const handleShowNames = () => {\n    setShowNames(true);\n  };\n\n  // В данном хендлере мы изменяем состояние на какое-то конкретное\n  const handleHideNames = () => {\n    setShowNames(false);\n  };\n\n  // В данном хендлере мы изменяем состояние в зависимости от его прошлого значения\n  const handleSwitch = () => {\n    // метод из useState может принимать как определенное значение, так и метод,\n    // принимающий прошлое значение и возвращающий новое\n    setShowNames(state => !state);\n  };\n  useEffect(() => {\n    console.log('Этот код выполняется только на первом рендере компонента');\n    // В данном примере можно наблюдать Spread syntax (Троеточие перед массивом)\n    setNames(names => [...names, 'Бедный студент']);\n    return () => {\n      console.log('Этот код выполняется, когда компонент будет размонтирован');\n    };\n  }, []);\n  useEffect(() => {\n    console.log('Этот код выполняется каждый раз, когда изменится состояние showNames ');\n    setRandomName(names[Math.floor(Math.random() * names.length)]);\n  }, [showNames]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"\\u0421\\u043B\\u0443\\u0447\\u0430\\u0439\\u043D\\u043E\\u0435 \\u0438\\u043C\\u044F \\u0438\\u0437 \\u0441\\u043F\\u0438\\u0441\\u043A\\u0430: \", randomName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleShowNames,\n      children: \"\\u0425\\u043E\\u0447\\u0443 \\u0443\\u0432\\u0438\\u0434\\u0435\\u0442\\u044C \\u0441\\u043F\\u0438\\u0441\\u043E\\u043A \\u0438\\u043C\\u0435\\u043D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleHideNames,\n      children: \"\\u0425\\u043E\\u0447\\u0443 \\u0441\\u043A\\u0440\\u044B\\u0442\\u044C \\u0441\\u043F\\u0438\\u0441\\u043E\\u043A \\u0438\\u043C\\u0435\\u043D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSwitch,\n      children: showNames ? 'Хочу скрыть список имен' : 'Хочу увидеть список имен'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), showNames && /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: names.map((name, index) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 29\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n}\n_s(StartPage, \"pqqR7AhELH1VvMpgjxy2IVrfZ3I=\");\n_c = StartPage;\nexport default StartPage;\nvar _c;\n$RefreshReg$(_c, \"StartPage\");","map":{"version":3,"names":["React","useEffect","useState","data","StartPage","randomName","setRandomName","names","setNames","showNames","setShowNames","handleShowNames","handleHideNames","handleSwitch","state","console","log","Math","floor","random","length","map","name","index"],"sources":["C:/Users/prite/WebstormProjects/lab4/my-app/src/StartPage.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\r\n\r\nconst data = [\r\n    'Берик Дондаррион',\r\n    'Леди Мелиссандра',\r\n    'Полливер',\r\n    'Уолдер Фрей',\r\n    'Тайвин Ланнистер',\r\n    'Сир Мерин Трэнт',\r\n    'Король Джоффри',\r\n    'Сир Илин Пейн',\r\n    'Гора',\r\n    'Пес',\r\n    'Серсея Ланнистер',\r\n]\r\n\r\nfunction StartPage() {\r\n\r\n    // В функциональных компонентах для работы с состоянием можно использовать хук useState()\r\n    // Он возвращает кортеж из двух элементов:\r\n    // 1 элемент - объект состояния\r\n    // 2 элемент - метод который позволит нам обновить состояние\r\n    const [randomName, setRandomName] = useState();\r\n\r\n    // Кстати, это хороший пример деструктуризации массива в JavaScript\r\n    const [names, setNames] = useState(data);\r\n\r\n    const [showNames, setShowNames] = useState(false);\r\n\r\n    // В данном хендлере мы изменяем состояние на какое-то конкретное\r\n    const handleShowNames = () =>{\r\n        setShowNames(true)\r\n    }\r\n\r\n    // В данном хендлере мы изменяем состояние на какое-то конкретное\r\n    const handleHideNames = () =>{\r\n        setShowNames(false)\r\n    }\r\n\r\n    // В данном хендлере мы изменяем состояние в зависимости от его прошлого значения\r\n    const handleSwitch = () =>{\r\n        // метод из useState может принимать как определенное значение, так и метод,\r\n        // принимающий прошлое значение и возвращающий новое\r\n        setShowNames(state => !state)\r\n    }\r\n\r\n    useEffect(()=>{\r\n        console.log('Этот код выполняется только на первом рендере компонента')\r\n        // В данном примере можно наблюдать Spread syntax (Троеточие перед массивом)\r\n        setNames(names=>[...names, 'Бедный студент'])\r\n\r\n        return () => {\r\n            console.log('Этот код выполняется, когда компонент будет размонтирован')\r\n        }\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        console.log('Этот код выполняется каждый раз, когда изменится состояние showNames ')\r\n        setRandomName(names[Math.floor(Math.random()*names.length)])\r\n    },[showNames])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3>Случайное имя из списка: {randomName}</h3>\r\n            {/*Кнопка для того, чтобы показать имена*/}\r\n            <button onClick={handleShowNames}>Хочу увидеть список имен</button>\r\n            {/*Кнопка для того, чтобы скрыть имена*/}\r\n            <button onClick={handleHideNames}>Хочу скрыть список имен</button>\r\n\r\n            {/*Универсальная кнопка*/}\r\n            <button onClick={handleSwitch}>{showNames ? 'Хочу скрыть список имен' :'Хочу увидеть список имен' }</button>\r\n\r\n            {/*React отрисует список только если showNames будет равен true, boolean значения игнорируются при отрисовке*/}\r\n            {showNames && <ul>\r\n                {/*Рекомендую почитать про прекрасные встроенные методы массивов в JavaScript    */}\r\n                {names.map((name, index)=>{\r\n                    return (\r\n                        <li key={index}>\r\n                            <span>{name}</span>\r\n                        </li>\r\n                    )\r\n                })}\r\n            </ul>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StartPage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAAC;AAEjD,MAAMC,IAAI,GAAG,CACT,kBAAkB,EAClB,kBAAkB,EAClB,UAAU,EACV,aAAa,EACb,kBAAkB,EAClB,iBAAiB,EACjB,gBAAgB,EAChB,eAAe,EACf,MAAM,EACN,KAAK,EACL,kBAAkB,CACrB;AAED,SAASC,SAAS,GAAG;EAAA;EAEjB;EACA;EACA;EACA;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGJ,QAAQ,EAAE;;EAE9C;EACA,MAAM,CAACK,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAACC,IAAI,CAAC;EAExC,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;;EAEjD;EACA,MAAMS,eAAe,GAAG,MAAK;IACzBD,YAAY,CAAC,IAAI,CAAC;EACtB,CAAC;;EAED;EACA,MAAME,eAAe,GAAG,MAAK;IACzBF,YAAY,CAAC,KAAK,CAAC;EACvB,CAAC;;EAED;EACA,MAAMG,YAAY,GAAG,MAAK;IACtB;IACA;IACAH,YAAY,CAACI,KAAK,IAAI,CAACA,KAAK,CAAC;EACjC,CAAC;EAEDb,SAAS,CAAC,MAAI;IACVc,OAAO,CAACC,GAAG,CAAC,0DAA0D,CAAC;IACvE;IACAR,QAAQ,CAACD,KAAK,IAAE,CAAC,GAAGA,KAAK,EAAE,gBAAgB,CAAC,CAAC;IAE7C,OAAO,MAAM;MACTQ,OAAO,CAACC,GAAG,CAAC,2DAA2D,CAAC;IAC5E,CAAC;EACL,CAAC,EAAC,EAAE,CAAC;EAELf,SAAS,CAAC,MAAI;IACVc,OAAO,CAACC,GAAG,CAAC,uEAAuE,CAAC;IACpFV,aAAa,CAACC,KAAK,CAACU,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAACZ,KAAK,CAACa,MAAM,CAAC,CAAC,CAAC;EAChE,CAAC,EAAC,CAACX,SAAS,CAAC,CAAC;EAGd,oBACI;IAAA,wBACI;MAAA,4IAA8BJ,UAAU;IAAA;MAAA;MAAA;MAAA;IAAA,QAAM,eAE9C;MAAQ,OAAO,EAAEM,eAAgB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAkC,eAEnE;MAAQ,OAAO,EAAEC,eAAgB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAiC,eAGlE;MAAQ,OAAO,EAAEC,YAAa;MAAA,UAAEJ,SAAS,GAAG,yBAAyB,GAAE;IAA0B;MAAA;MAAA;MAAA;IAAA,QAAW,EAG3GA,SAAS,iBAAI;MAAA,UAETF,KAAK,CAACc,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAG;QACtB,oBACI;UAAA,uBACI;YAAA,UAAOD;UAAI;YAAA;YAAA;YAAA;UAAA;QAAQ,GADdC,KAAK;UAAA;UAAA;UAAA;QAAA,QAET;MAEb,CAAC;IAAC;MAAA;MAAA;MAAA;IAAA,QACD;EAAA;IAAA;IAAA;IAAA;EAAA,QAEH;AAEd;AAAC,GAvEQnB,SAAS;AAAA,KAATA,SAAS;AAyElB,eAAeA,SAAS;AAAC;AAAA"},"metadata":{},"sourceType":"module"}